"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class CloudConformity {
    constructor(endpoint, apikey) {
        this.generateRequest = (method, path, data) => {
            return {
                baseURL: this.url,
                url: path,
                method: method,
                headers: {
                    'Content-Type': 'application/vnd.api+json',
                    'Authorization': 'ApiKey ' + this.apikey
                },
                responseType: 'json',
                ...data && { data: data }
            };
        };
        this.parseAxiosOutput = (axiosOutput) => {
            return axiosOutput.data.data;
        };
        this.endpoint = endpoint;
        this.url = "https://" + endpoint + "-api.cloudconformity.com/v1/";
        this.apikey = apikey;
    }
    ;
    // Accounts API
    async createAnAccount(name, environment, roleArn, externalId, costPackage, hasRealTimeMonitoring) {
        const data = {
            "data": {
                "type": "account",
                "attributes": {
                    "name": name,
                    "environment": environment,
                    "access": {
                        "keys": {
                            "roleArn": roleArn,
                            "externalId": externalId
                        }
                    },
                    "costPackage": costPackage,
                    "hasRealTimeMonitoring": hasRealTimeMonitoring
                }
            }
        };
        console.log(JSON.stringify(data, null, 2));
        const result = await this.ccRequest("POST", "accounts", data);
        return result.id;
    }
    async listAllAccounts() {
        return await this.ccRequest("GET", "accounts");
    }
    ;
    async getAccountDetails(id) {
        return await this.ccRequest("GET", "accounts/" + id);
    }
    ;
    async getAccountAccessSetting(id) {
        return await this.ccRequest("GET", "accounts/" + id + "/access");
    }
    ;
    async scanAccount(ccAccountId) {
        return await this.ccRequest("POST", "accounts/" + ccAccountId + "/scan");
    }
    ;
    async updateAccountSubscription(ccAccountId, costPackage, hasRealTimeMonitoring) {
        const data = {
            "data": {
                "attributes": {
                    "costPackage": costPackage,
                    "hasRealTimeMonitoring": hasRealTimeMonitoring
                }
            }
        };
        return await this.ccRequest("PATCH", "accounts/" + ccAccountId + "/subscription", data);
    }
    ;
    async updateAccount(ccAccountId, name, environment, code, tags) {
        const data = {
            "data": {
                "attributes": {
                    "name": name,
                    "environment": environment,
                    "code": code,
                    "tags": tags
                }
            }
        };
        return await this.ccRequest("PATCH", "accounts/" + ccAccountId, data);
    }
    ;
    /**
     * @TODO: Implement notes
     * @param ccAccountId target account id
     * @param ruleId target rule id
     * @param notes optional parameter to get notes for the specified rule setting
     */
    async getRuleSetting(ccAccountId, ruleId, notes) {
        return await this.ccRequest("GET", "accounts/" + ccAccountId + "settings/rules/" + ruleId);
    }
    ;
    async deleteAccount(ccAccountId) {
        return await this.ccRequest("DELETE", "accounts/" + ccAccountId);
    }
    ;
    // ExternalID API
    async getOrganizationCloudConformityExternalId() {
        const result = await this.ccRequest("GET", "organisation/external-id");
        return result.id;
    }
    ;
    async createAnExternalId() {
        const result = await this.ccRequest("POST", "organisation/external-id");
        return result.id;
    }
    ;
    // Template Scanner API
    async scanACloudFormationTemplate(template, type, profileId, accountId) {
        const data = {
            "data": {
                "attributes": {
                    "type": type ? type : "cloudformation-template",
                    ...profileId && { "profileId": profileId },
                    ...accountId && { "accountId": accountId },
                    "contents": template
                }
            }
        };
        return (await this.ccRequest("POST", "template-scanner/scan", data));
    }
    async scanACloudFormationTemplateAndReturAsArrays(template, type, profileId, accountId) {
        const data = await this.scanACloudFormationTemplate(template, type, profileId, accountId);
        try {
            const success = data.filter((entry) => entry.attributes.status === "SUCCESS");
            const failure = data.filter((entry) => entry.attributes.status === "FAILURE");
            return {
                success,
                failure
            };
        }
        catch (error) {
            return {
                success: [],
                failure: []
            };
        }
    }
    // Users API
    async getAllUsers() {
        return await this.ccRequest("GET", "/users");
    }
    ;
    async getTheCurrentUser() {
        return await this.ccRequest("GET", "/users/whoami");
    }
    ;
    async getTheCurrentUserEmail() {
        const user = await this.getTheCurrentUser();
        return user.attributes.email;
    }
    async getUserDetails(userId) {
        return await this.ccRequest("GET", "/users/" + userId);
    }
    ;
    async updateAUsersRoleAndAccountAccessLevel(userId, role, accessList) {
        const data = {
            "data": {
                "role": role,
                ...accessList && { "accessList": accessList }
            }
        };
        return await this.ccRequest("PATCH", "/users/" + userId, data);
    }
    ;
    async revokeUser(userId) {
        return await this.ccRequest("DELETE", "/users/" + userId);
    }
    ;
    // Settings API
    async createCommunicationSettings(channel, enabled, manual, filter, configuration, accountId) {
        const data = {
            "data": {
                "type": "settings",
                "attributes": {
                    "type": "communication",
                    "channel": channel,
                    "enabled": enabled,
                    ...manual && { "manual": manual },
                    ...filter && { "filter": filter },
                    ...configuration && { "configuration": configuration }
                },
                "relationships": {
                    "account": {
                        "data": accountId ? {
                            "type": "accounts",
                            "accountId": accountId
                        } : null
                    }
                }
            }
        };
        return await this.ccRequest("POST", "/settings/communication", data);
    }
    ;
    async getCommunicationSettings() {
        return await this.ccRequest("GET", "/settings/communication");
    }
    async getCommunicationSettingDetails(communicationId) {
        return await this.ccRequest("GET", "/settings/" + communicationId);
    }
    ;
    async updateCommunicationSetting(communicationId, channel, enabled, serviceName, serviceKey) {
        const data = {
            "data": {
                "type": "settings",
                "attributes": {
                    "type": "communication",
                    "channel": channel,
                    "enabled": enabled,
                    "configuration": {
                        "serviceName": serviceName,
                        "serviceKey": serviceKey
                    }
                }
            }
        };
        return await this.ccRequest("PATCH", "/settings/communication/" + communicationId, data);
    }
    ;
    async deleteCommunicationSetting(communicationId) {
        return await this.ccRequest("DELETE", "/settings/" + communicationId);
    }
    ;
    // Profiles API
    /**
     * Displays a list of profiles associated to an organisation.
     */
    async listAllProfiles() {
        return await this.ccRequest("GET", "profiles");
    }
    /**
     * Allows you to get the details of the specified profile.
     * @param profile The Cloud Conformity ID of the profile
     */
    async getProfileAndRuleSettings(profile) {
        return await this.ccRequest("GET", "profiles/" + profile);
    }
    ;
    /**
     * Save a new profile and a batch of configured rule settings upon profile creation
     * @param profile a JSON object following the Profile GUI standard.
     */
    async saveNewProfileAndRuleSettings(profile) {
        return await this.ccRequest("POST", "profiles", this.profileJsonToDataParameter(profile));
    }
    /**
     * Converts a profile to the expected POST parameter.
     * @param profile a JSON object following the Profile GUI standard.
     */
    profileJsonToDataParameter(profile) {
        let dataArray = [];
        let includedArray = [];
        profile.ruleSettings.map((rule) => {
            dataArray.push({
                type: "rules",
                id: rule.id
            });
            includedArray.push({
                type: "rules",
                id: rule.id,
                attributes: {
                    enabled: rule.enabled,
                    exceptions: rule.exceptions,
                    riskLevel: rule.riskLevel,
                    ...(rule.extraSettings && { extraSettings: rule.extraSettings })
                },
            });
        });
        return {
            included: includedArray,
            data: {
                type: "profiles",
                attributes: {
                    name: profile.name,
                    description: profile.description
                },
                relationships: {
                    ruleSettings: {
                        "data": dataArray
                    }
                }
            }
        };
    }
    /**
     * Allows you to delete a specified profile and all affiliated rule settings.
     * @param profileId The Cloud Conformity ID of the profile
     */
    async deleteProfileAndRuleSettings(profileId) {
        return await this.ccRequest("DELETE", "profiles/" + profileId);
    }
    /**
     * Allows you to apply profile and rule settings to a set of accounts under your organisation.
     * @param profileId The Cloud Conformity ID of the profile
     * @param mode Mode of how the profile will be applied to the accounts, i.e. "fill-gaps", "overwrite" or "replace".
     * @param notes Log notes. This field is expected to be filled out, ideally with a reason for the profile being applied.
     * @param accountIds An Array of account Id's that will be configured by the profile.
     */
    async applyProfileToAccounts(profileId, mode, notes, accountIds) {
        const data = {
            meta: {
                accountIds: accountIds,
                types: ["rule"],
                mode: mode,
                notes: notes,
            }
        };
        return await this.ccRequest("POST", "profiles/" + profileId, data);
    }
    // // Checks API
    async listAllChecks() {
        return await this.ccRequest("GET", "checks");
    }
    ;
    // Private helper functions
    /**
     * Sends a HTTP request to Cloud Conformity endpoint.
     * @param method HTTP Method
     * @param path path to be appended to CC endpoint
     * @param data Optional parameter with json data to be submitted with the request.
     */
    async ccRequest(method, path, data) {
        try {
            return this.parseAxiosOutput(await axios_1.default(this.generateRequest(method, path, data ? data : undefined)));
        }
        catch (error) {
            return await this.parseAxiosError(error);
        }
    }
    ;
    async parseAxiosError(error) {
        // Error 😨
        if (error.response) {
            /*
            * The request was made and the server responded with a
            * status code that falls out of the range of 2xx
            */
            return error.response.data;
        }
        else if (error.request) {
            /*
            * The request was made but no response was received, `error.request`
            * is an instance of XMLHttpRequest in the browser and an instance
            * of http.ClientRequest in Node.js
            */
            return error.request;
        }
        else {
            // Something happened in setting up the request and triggered an Error
            return error.message;
        }
    }
    ;
}
exports.CloudConformity = CloudConformity;
//# sourceMappingURL=cloudconformity.js.map