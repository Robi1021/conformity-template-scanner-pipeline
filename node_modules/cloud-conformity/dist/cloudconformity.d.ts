export declare class CloudConformity {
    endpoint: string;
    apikey: string;
    url: string;
    constructor(endpoint: string, apikey: string);
    createAnAWSAccount(name: string, environment: string, roleArn: string, externalId: string, costPackage: boolean, hasRealTimeMonitoring: boolean): Promise<any>;
    createAnAzureSubscription(name: string, environment: string, subscriptionId: string, activeDirectoryId: string): Promise<any>;
    createAGCPAccount(name: string, environment: string, projectId: string, projectName: string, serviceAccountUniqueId: string): Promise<any>;
    listAllAccounts(): Promise<any>;
    getAccountDetails(id: string): Promise<any>;
    getAccountAccessSetting(id: string): Promise<any>;
    scanAccount(ccAccountId: string): Promise<any>;
    updateAccountSubscription(ccAccountId: string, costPackage: boolean, hasRealTimeMonitoring: boolean): Promise<any>;
    updateAccount(ccAccountId: string, name: string, environment: string, code: string, tags: [string]): Promise<any>;
    /**
     * @TODO: Implement notes
     * @param ccAccountId target account id
     * @param ruleId target rule id
     * @param notes optional parameter to get notes for the specified rule setting
     */
    getRuleSetting(ccAccountId: string, ruleId: string, notes?: boolean): Promise<any>;
    deleteAccount(ccAccountId: string): Promise<any>;
    getOrganizationCloudConformityExternalId(): Promise<string>;
    createAnExternalId(): Promise<string>;
    listTemplateScannerRules(type?: string): Promise<any>;
    scanATemplate(template: string, type: string, profileId?: string, accountId?: string): Promise<any>;
    scanACloudFormationTemplate(template: string, profileId?: string, accountId?: string): Promise<any>;
    scanATerraformTemplate(template: string, profileId?: string, accountId?: string): Promise<any>;
    scanATemplateAndReturnAsArrays(template: string, type: string, profileId?: string, accountId?: string): Promise<{
        success: any[];
        failure: any[];
    }>;
    scanACloudFormationTemplateAndReturAsArrays(template: string, profileId?: string, accountId?: string): Promise<{
        success: any[];
        failure: any[];
    }>;
    scanATerraformTemplateAndReturAsArrays(template: string, profileId?: string, accountId?: string): Promise<{
        success: any[];
        failure: any[];
    }>;
    getAllUsers(): Promise<any>;
    getTheCurrentUser(): Promise<any>;
    getTheCurrentUserEmail(): Promise<any>;
    getUserDetails(userId: string): Promise<any>;
    updateAUsersRoleAndAccountAccessLevel(userId: string, role: string, accessList?: [object]): Promise<any>;
    revokeUser(userId: string): Promise<any>;
    createCommunicationSettings(channel: string, enabled: boolean, manual?: boolean, filter?: object, configuration?: object, accountId?: string): Promise<any>;
    getCommunicationSettings(): Promise<any>;
    getCommunicationSettingDetails(communicationId: string): Promise<any>;
    updateCommunicationSetting(communicationId: string, channel: string, enabled: boolean, serviceName: string, serviceKey: string): Promise<any>;
    deleteCommunicationSetting(communicationId: string): Promise<any>;
    /**
     * Displays a list of profiles associated to an organisation.
     */
    listAllProfiles(): Promise<any>;
    /**
     * Allows you to get the details of the specified profile.
     * @param profile The Cloud Conformity ID of the profile
     */
    getProfileAndRuleSettings(profile: string): Promise<any>;
    /**
     * Save a new profile and a batch of configured rule settings upon profile creation
     * @param profile a JSON object following the Profile GUI standard.
     */
    saveNewProfileAndRuleSettings(profile: any): Promise<any>;
    /**
     * Converts a profile to the expected POST parameter.
     * @param profile a JSON object following the Profile GUI standard.
     */
    private profileJsonToDataParameter;
    /**
     * Allows you to delete a specified profile and all affiliated rule settings.
     * @param profileId The Cloud Conformity ID of the profile
     */
    deleteProfileAndRuleSettings(profileId: string): Promise<any>;
    /**
     * Allows you to apply profile and rule settings to a set of accounts under your organisation.
     * @param profileId The Cloud Conformity ID of the profile
     * @param mode Mode of how the profile will be applied to the accounts, i.e. "fill-gaps", "overwrite" or "replace".
     * @param notes Log notes. This field is expected to be filled out, ideally with a reason for the profile being applied.
     * @param accountIds An Array of account Id's that will be configured by the profile.
     */
    applyProfileToAccounts(profileId: string, mode: string, notes: string, accountIds: string[]): Promise<any>;
    listAllChecks(): Promise<string>;
    /**
     * Sends a HTTP request to Cloud Conformity endpoint.
     * @param method HTTP Method
     * @param path path to be appended to CC endpoint
     * @param data Optional parameter with json data to be submitted with the request.
     */
    private ccRequest;
    private generateRequest;
    private parseAxiosOutput;
    private parseAxiosError;
}
